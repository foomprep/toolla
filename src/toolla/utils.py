from typing import get_type_hints, Callable, Dict, Any

# Generated by Claude Sonnet 3.5
def parse_descriptions(input_string):
    lines = input_string.strip().split('\n')
    result = {}
    for i, line in enumerate(lines):
        if i == 0:
            result['fn_description'] = line.strip()
        elif ':' in line:
            key, value = line.split(':', 1)
            key = key.strip()
            value = value.strip()
            result[key] = value
    
    return result

# TODO add support for enums
def build_tool_schema(f: Callable):
    """Build a JSON schema for a tool function."""
    descriptions = parse_descriptions(f.__doc__)
    hints = get_type_hints(f)
    schema = {
        "name": f.__name__,
        "description": descriptions['fn_description'],
        "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
        },
    }

    for param, hint in hints.items():
        if param == "return":
            continue
        var_type = ""
        if hint is int or hint is float:
            var_type = "number"
        if hint is str:
            var_type = "string"
        schema["input_schema"]["properties"][param] = {
            "type": var_type,
            "description": descriptions[param]
        }
        schema["input_schema"]["required"].append(param)
    return schema
